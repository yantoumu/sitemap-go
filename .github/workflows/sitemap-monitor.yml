name: Sitemap Monitor

on:
  # 定时运行：每天2次
  # 中国时间(UTC+8): 早上7:00 = UTC 23:00(前一天)
  # 中国时间(UTC+8): 晚上23:00 = UTC 15:00
  schedule:
    - cron: '0 23 * * *'  # 中国时间早上7:00
    - cron: '0 15 * * *'  # 中国时间晚上23:00
  
  # 手动触发
  workflow_dispatch:
    inputs:
      sitemap_workers:
        description: 'Number of sitemap workers'
        required: false
        default: '15'
      api_workers:
        description: 'Number of API workers'
        required: false
        default: '2'
      debug:
        description: 'Enable debug logging'
        required: false
        default: 'false'

env:
  GO_VERSION: '1.21'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          /go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Build sitemap monitor
      run: |
        go mod tidy
        go build -ldflags="-s -w" -o sitemap-go main.go
        chmod +x sitemap-go
        echo "✅ Build completed successfully"
        echo "📦 Binary size: $(ls -lh sitemap-go | awk '{print $5}')"
    
    - name: Create data directory
      run: mkdir -p ./data
    
    - name: Run sitemap monitoring
      env:
        # 必需的配置 (从 GitHub Secrets)
        BACKEND_URL: ${{ secrets.BACKEND_API_URL }}
        BACKEND_API_KEY: ${{ secrets.BACKEND_API_KEY }}
        TRENDS_API_URL: ${{ secrets.TRENDS_API_URL }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        
        # 基础配置 (可调整)
        SITEMAP_WORKERS: ${{ github.event.inputs.sitemap_workers || '15' }}
        API_WORKERS: ${{ github.event.inputs.api_workers || '4' }}
        DEBUG: ${{ github.event.inputs.debug || 'false' }}
        
        # 性能配置 (GitHub Actions 优化)
        API_RATE_LIMIT: '1.0'      # 谨慎的API请求频率
        SITEMAP_RATE_LIMIT: '20.0' # 适中的sitemap抓取频率 (GitHub Actions网络)
        BATCH_SIZE: '300'          # 批量提交大小
        MAX_URLS_PER_SITEMAP: '50000'  # 限制大型sitemap
        
        # 默认监控网站 (从 secrets 设置)
        SITEMAP_URLS: ${{ secrets.SITEMAP_URLS }}
      run: |
        echo "🚀 Starting sitemap monitoring with optimized configuration..."
        echo "📊 Configuration:"
        echo "  - Sitemap workers: $SITEMAP_WORKERS"
        echo "  - API workers: $API_WORKERS"
        echo "  - Debug mode: $DEBUG"
        echo "  - API rate limit: $API_RATE_LIMIT req/sec"
        echo "  - Sitemap rate limit: $SITEMAP_RATE_LIMIT req/sec"
        
        # 检查 SITEMAP_URLS 设置
        if [ -z "$SITEMAP_URLS" ]; then
          echo "📝 Note: SITEMAP_URLS not set, will use default sitemap list"
        else
          echo "📝 SITEMAP_URLS is configured (URLs are masked for security)"
        fi
        
        # 验证必需的环境变量
        if [ -z "$BACKEND_URL" ]; then
          echo "❌ ERROR: BACKEND_API_URL secret is required"
          echo "Please set BACKEND_API_URL in GitHub repository secrets"
          exit 1
        fi
        
        if [ -z "$BACKEND_API_KEY" ]; then
          echo "❌ ERROR: BACKEND_API_KEY secret is required"
          echo "Please set BACKEND_API_KEY in GitHub repository secrets"
          exit 1
        fi
        
        if [ -z "$TRENDS_API_URL" ]; then
          echo "❌ ERROR: TRENDS_API_URL secret is required"
          echo "Please set TRENDS_API_URL in GitHub repository secrets"
          exit 1
        fi
        
        if [ -z "$ENCRYPTION_KEY" ]; then
          echo "❌ ERROR: ENCRYPTION_KEY secret is required"
          echo "Please set ENCRYPTION_KEY in GitHub repository secrets"
          echo "Generate with: openssl rand -base64 32"
          exit 1
        fi
        
        # 运行监控脚本
        ./sitemap-go
        
    - name: Upload monitoring results (on failure)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-logs-${{ github.run_number }}
        path: |
          ./data/
          *.log
        retention-days: 7
        compression-level: 6
        include-hidden-files: false
    
    - name: Create summary report
      if: always()
      run: |
        echo "## 🔍 Sitemap Monitoring Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **UTC Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **China Time**: $(TZ='Asia/Shanghai' date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration**:" >> $GITHUB_STEP_SUMMARY
        echo "  - Sitemap Workers: $SITEMAP_WORKERS" >> $GITHUB_STEP_SUMMARY
        echo "  - API Workers: $API_WORKERS" >> $GITHUB_STEP_SUMMARY
        echo "  - Debug Mode: $DEBUG" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "./data/processed_urls.json" ]; then
          PROCESSED_COUNT=$(wc -l < "./data/processed_urls.json" 2>/dev/null || echo "0")
          echo "- **Processed URLs**: $PROCESSED_COUNT" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "./data/failed_keywords.json" ]; then
          FAILED_COUNT=$(wc -l < "./data/failed_keywords.json" 2>/dev/null || echo "0")
          echo "- **Failed Keywords**: $FAILED_COUNT" >> $GITHUB_STEP_SUMMARY
        fi

  # 可选：通知作业 (如果需要)
  notify:
    runs-on: ubuntu-latest
    needs: monitor
    if: failure()  # 仅在监控失败时通知
    
    steps:
    - name: Notify on failure
      run: |
        echo "❌ Sitemap monitoring failed at $(date -u)"
        echo "🔗 Job URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        # 可以在这里添加 Slack、Discord 或其他通知
        # 例如：curl -X POST "webhook-url" -d "Sitemap monitoring failed"
