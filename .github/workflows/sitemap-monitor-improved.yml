name: Sitemap Monitor (Improved)

on:
  # 定时运行：每天2次
  # 中国时间(UTC+8): 早上7:00 = UTC 23:00(前一天)
  # 中国时间(UTC+8): 晚上23:00 = UTC 15:00
  schedule:
    - cron: '0 23 * * *'  # 中国时间早上7:00
    - cron: '0 15 * * *'  # 中国时间晚上23:00
  
  # 手动触发
  workflow_dispatch:
    inputs:
      sitemap_workers:
        description: 'Number of sitemap workers'
        required: false
        default: '30'
      api_workers:
        description: 'Number of API workers'
        required: false
        default: '8'
      debug:
        description: 'Enable debug logging'
        required: false
        default: 'false'

env:
  GO_VERSION: '1.21'

jobs:
  monitor:
    runs-on: ubuntu-latest

    # 添加必要的权限以支持向main分支推送
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # 获取完整的git历史以支持数据提交
        fetch-depth: 0
        # 确保可以推送到main分支
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          /go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    # 缓存监控数据以实现持久化
    - name: Cache monitoring data
      uses: actions/cache@v4
      with:
        path: ./data
        key: monitoring-data-${{ runner.os }}-${{ github.run_number }}
        restore-keys: |
          monitoring-data-${{ runner.os }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Build sitemap monitor
      run: |
        go mod tidy
        go build -ldflags="-s -w" -o sitemap-go main.go
        chmod +x sitemap-go
        echo "✅ Build completed successfully"
        echo "📦 Binary size: $(ls -lh sitemap-go | awk '{print $5}')"
    
    - name: Create data directory and restore previous data
      env:
        DATA_BRANCH: 'monitoring-data'
      run: |
        # 创建正确的数据目录结构（匹配EncryptedFileStorage的getFilePath逻辑）
        mkdir -p ./data/pr ./data/fa ./data/si ./data-export
        
        # 从数据分支恢复之前的监控数据
        if git ls-remote --heads origin ${DATA_BRANCH} | grep -q ${DATA_BRANCH}; then
          echo "📥 Restoring previous monitoring data from ${DATA_BRANCH} branch..."
          git fetch origin ${DATA_BRANCH}
          
          # 直接检出data目录，保持完整的目录结构
          git checkout origin/${DATA_BRANCH} -- data/ 2>/dev/null || echo "No previous data directory found"
          
          # 验证关键文件是否正确恢复
          if [ -f "./data/pr/processed_urls.enc" ]; then
            echo "✅ Restored processed URLs: $(stat -c%s "./data/pr/processed_urls.enc" 2>/dev/null || echo "unknown") bytes"
          else
            echo "📝 No processed URLs found"
          fi
          
          if [ -f "./data/fa/failed_keywords.enc" ]; then
            echo "✅ Restored failed keywords: $(stat -c%s "./data/fa/failed_keywords.enc" 2>/dev/null || echo "unknown") bytes"
          else
            echo "📝 No failed keywords found"
          fi
          
          # 统计sitemap数据文件
          SITEMAP_FILES=$(find ./data/si -name "*.enc" 2>/dev/null | wc -l)
          echo "✅ Restored $SITEMAP_FILES sitemap data files"
          
          echo "📊 Total restored files: $(find ./data -name "*.enc" 2>/dev/null | wc -l)"
          
          # 验证加密密钥一致性（简化版本）
          if git checkout origin/${DATA_BRANCH} -- DATA_SUMMARY.txt 2>/dev/null; then
            STORED_HASH=$(grep "Key Hash:" DATA_SUMMARY.txt | cut -d' ' -f3 2>/dev/null || echo "")
            CURRENT_HASH=$(echo -n "$ENCRYPTION_KEY" | sha256sum | cut -d' ' -f1 | head -c 8)
            if [ "$STORED_HASH" != "" ] && [ "$STORED_HASH" != "$CURRENT_HASH" ]; then
              echo "⚠️ WARNING: Encryption key mismatch detected!"
              echo "  Previous hash: $STORED_HASH"
              echo "  Current hash:  $CURRENT_HASH"
              echo "  This may prevent data loading. Consider key rotation if needed."
            else
              echo "✅ Encryption key consistency verified"
            fi
            rm -f DATA_SUMMARY.txt # 清理临时文件
          fi
        else
          echo "📝 No previous data branch found, starting fresh"
        fi
    
    - name: Run sitemap monitoring
      env:
        # 必需的配置 (从 GitHub Secrets)
        BACKEND_URL: ${{ secrets.BACKEND_API_URL }}
        BACKEND_API_KEY: ${{ secrets.BACKEND_API_KEY }}
        TRENDS_API_URL: ${{ secrets.TRENDS_API_URL }}
        TRENDS_API_URL_SECONDARY: ${{ secrets.TRENDS_API_URL_SECONDARY || secrets.TRENDS_API_URL }}
        ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
        
        # 基础配置 (可调整)
        SITEMAP_WORKERS: ${{ github.event.inputs.sitemap_workers || '30' }}
        API_WORKERS: ${{ github.event.inputs.api_workers || '8' }}
        DEBUG: ${{ github.event.inputs.debug || 'false' }}
        
        # 性能配置 (GitHub Actions 优化)
        API_RATE_LIMIT: '5.0'       # 优化API请求频率（避免429错误）
        SITEMAP_RATE_LIMIT: '30.0'  # 适中的sitemap抓取频率
        BATCH_SIZE: '5'             # 5个关键词批量查询（符合API限制）
        MAX_URLS_PER_SITEMAP: '50000'  # 限制大型sitemap
        
        # 默认监控网站 (从 secrets 设置)
        SITEMAP_URLS: ${{ secrets.SITEMAP_URLS }}
        
        # GitHub Actions 环境标记
        GITHUB_ACTIONS: 'true'
      run: |
        echo "🚀 Starting sitemap monitoring with optimized configuration..."
        echo "📊 Configuration:"
        echo "  - Sitemap workers: $SITEMAP_WORKERS"
        echo "  - API workers: $API_WORKERS"
        echo "  - Debug mode: $DEBUG"
        echo "  - API rate limit: $API_RATE_LIMIT req/sec"
        echo "  - Sitemap rate limit: $SITEMAP_RATE_LIMIT req/sec"
        echo "  - Batch size: $BATCH_SIZE keywords"
        
        # 检查 SITEMAP_URLS 设置
        if [ -z "$SITEMAP_URLS" ]; then
          echo "📝 Note: SITEMAP_URLS not set, will use default sitemap list"
        else
          echo "📝 SITEMAP_URLS is configured (URLs are masked for security)"
        fi
        
        # 验证必需的环境变量
        if [ -z "$BACKEND_URL" ]; then
          echo "❌ ERROR: BACKEND_API_URL secret is required"
          echo "Please set BACKEND_API_URL in GitHub repository secrets"
          exit 1
        fi
        
        if [ -z "$BACKEND_API_KEY" ]; then
          echo "❌ ERROR: BACKEND_API_KEY secret is required"
          echo "Please set BACKEND_API_KEY in GitHub repository secrets"
          exit 1
        fi
        
        if [ -z "$TRENDS_API_URL" ]; then
          echo "❌ ERROR: TRENDS_API_URL secret is required"
          echo "Please set TRENDS_API_URL in GitHub repository secrets"
          exit 1
        fi
        
        if [ -z "$ENCRYPTION_KEY" ]; then
          echo "❌ ERROR: ENCRYPTION_KEY secret is required"
          echo "Please set ENCRYPTION_KEY in GitHub repository secrets"
          echo "Generate with: openssl rand -base64 32"
          exit 1
        fi
        
        # 运行监控脚本
        ./sitemap-go
        
    # 总是上传监控结果（成功和失败都上传）
    - name: Upload monitoring results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-results-${{ github.run_number }}
        path: |
          ./data/
          ./data-export/
          *.log
        retention-days: 30
        compression-level: 6
        include-hidden-files: false
    
    - name: Create summary report
      if: always()
      run: |
        echo "## 🔍 Sitemap Monitoring Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **UTC Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **China Time**: $(TZ='Asia/Shanghai' date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration**:" >> $GITHUB_STEP_SUMMARY
        echo "  - Sitemap Workers: $SITEMAP_WORKERS" >> $GITHUB_STEP_SUMMARY
        echo "  - API Workers: $API_WORKERS" >> $GITHUB_STEP_SUMMARY
        echo "  - Debug Mode: $DEBUG" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        # 检查导出的摘要文件
        if [ -f "./data-export/monitoring_summary.json" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Monitoring Statistics" >> $GITHUB_STEP_SUMMARY
          TOTAL_PROCESSED=$(jq -r .total_processed ./data-export/monitoring_summary.json)
          TOTAL_FAILED=$(jq -r .total_failed ./data-export/monitoring_summary.json)
          SUCCESS_RATE=$(jq -r .success_rate ./data-export/monitoring_summary.json)
          echo "- **Total Processed**: $TOTAL_PROCESSED" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Failed**: $TOTAL_FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate**: ${SUCCESS_RATE}%" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 显示最近的失败关键词
        if [ -f "./data-export/failed_keywords_summary.json" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Recent Failed Keywords" >> $GITHUB_STEP_SUMMARY
          jq -r '.recent_failures[:5][] | "- \(.keyword) from \(.sitemap_url)"' ./data-export/failed_keywords_summary.json >> $GITHUB_STEP_SUMMARY || true
        fi
        
    # 将监控数据提交到专用数据分支（安全的持久化存储）
    - name: Commit monitoring data to data branch
      if: always() && github.event_name == 'schedule'
      env:
        DATA_BRANCH: 'monitoring-data'
      run: |
        # 配置Git用户信息
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # 检查或创建数据分支
        if git ls-remote --heads origin ${DATA_BRANCH} | grep -q ${DATA_BRANCH}; then
          echo "📊 Switching to existing data branch..."
          git fetch origin ${DATA_BRANCH}:${DATA_BRANCH}
          git checkout ${DATA_BRANCH}
        else
          echo "📊 Creating new data branch..."
          git checkout -b ${DATA_BRANCH}
          echo "# Monitoring Data Branch" > README.md
          echo "This branch contains automated monitoring data. DO NOT merge into main." >> README.md
          git add README.md
          git commit -m "chore: initialize data branch"
          git push origin ${DATA_BRANCH}
        fi

        # 拉取最新的数据分支更改
        git pull origin ${DATA_BRANCH} --rebase || echo "No remote changes"

        # 清理超过30天的旧数据（在数据分支上进行）
        if [ -d "./data" ]; then
          find ./data -name "*.enc" -type f -mtime +30 -delete 2>/dev/null || true
          echo "🧹 Cleaned old data files (>30 days)"
        fi

        # 验证当前数据完整性
        echo "📊 Current data inventory:"
        PROCESSED_URLS=$([ -f "./data/pr/processed_urls.enc" ] && echo "✅" || echo "❌")
        FAILED_KEYWORDS=$([ -f "./data/fa/failed_keywords.enc" ] && echo "✅" || echo "❌")
        SITEMAP_COUNT=$(find ./data/si -name "*.enc" 2>/dev/null | wc -l)
        
        echo "  - Processed URLs: $PROCESSED_URLS"
        echo "  - Failed keywords: $FAILED_KEYWORDS"  
        echo "  - Sitemap files: $SITEMAP_COUNT"
        
        # 生成简单的数据摘要（符合KISS原则）
        echo "📊 Monitoring Data Summary" > DATA_SUMMARY.txt
        echo "Run: ${{ github.run_number }}" >> DATA_SUMMARY.txt  
        echo "Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> DATA_SUMMARY.txt
        echo "Processed URLs: $([ -f "./data/pr/processed_urls.enc" ] && echo "✅" || echo "❌")" >> DATA_SUMMARY.txt
        echo "Failed Keywords: $([ -f "./data/fa/failed_keywords.enc" ] && echo "✅" || echo "❌")" >> DATA_SUMMARY.txt
        echo "Sitemap Files: $SITEMAP_COUNT" >> DATA_SUMMARY.txt
        echo "Key Hash: $(echo -n "$ENCRYPTION_KEY" | sha256sum | cut -d' ' -f1 | head -c 8)" >> DATA_SUMMARY.txt

        # 检查是否有文件变更（现在直接检查data目录）
        if [ -n "$(git status --porcelain data/ DATA_SUMMARY.txt 2>/dev/null)" ]; then
          # 添加监控数据文件（直接添加data目录）
          git add data/ DATA_SUMMARY.txt

          # 提交更改（使用[skip ci]避免触发其他工作流）
          git commit -m "data: update monitoring - Run #${{ github.run_number }} [skip ci]
          
          - Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Workflow: ${{ github.workflow }}
          - Run ID: ${{ github.run_id }}"

          # 推送到数据分支
          git push origin ${DATA_BRANCH}
          echo "✅ Successfully pushed monitoring data to ${DATA_BRANCH} branch"
          echo "📊 View data at: https://github.com/${{ github.repository }}/tree/${DATA_BRANCH}"
        else
          echo "📝 No monitoring data changes detected, skipping commit"
        fi

        # 切回main分支（为了工作流的后续步骤）
        git checkout main || true

  # 可选：通知作业 (如果需要)
  notify:
    runs-on: ubuntu-latest
    needs: monitor
    if: failure()  # 仅在监控失败时通知
    
    steps:
    - name: Notify on failure
      run: |
        echo "❌ Sitemap monitoring failed at $(date -u)"
        echo "🔗 Job URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        # 可以在这里添加 Slack、Discord 或其他通知
        # 例如：curl -X POST "webhook-url" -d "Sitemap monitoring failed"